---
import MainLayout from "@layouts/MainLayout.astro";
---

<MainLayout title="Asistencia">
  <form class="check-in-form" id="witness">
    <fieldset>
      <legend>Completa el formulario para asistir al festival</legend>

      <input type="text" name="first-name" placeholder="Nombres" />
      <span class="error"></span>
      <br />
      <input type="text" name="last-name" placeholder="Apellido" />
      <span class="error"></span>
      <br />
      <input type="number" name="dni" placeholder="DNI" />
      <span class="error"></span>
      <br />
      <input
        type="tel"
        name="contact-number"
        placeholder="Numero de contacto"
      />
      <span class="error"></span>
      <br />
      <input type="text" name="email" placeholder="Email" />
      <span class="error"></span>
      <br />
      <label for="birthday">Fecha de nacimiento:</label>
      <input type="date" name="birthday" />
      <span class="error"></span>
      <br />
    </fieldset>
    <button class="button__confirm" type="submit">Confirmar</button>
  </form>
</MainLayout>

<script>
  class FieldValidator {
    constructor(input, validationFuntion = () => false) {
      this.input = input;
      this.validationFuntion = validationFuntion;
      this.errorSpan = input.nextElementSibling;
      this.error = "";
      this.touched = false;

      input.addEventListener("input", () => this.handleInput());
    }

    handleInput() {
      if (!this.touched) return;
      this.validate();
      this.renderError();
    }

    validate() {
      const value = this.input.value.trim();
      const result = this.validationFuntion(value);
      if (result) {
        this.error = result;
        return false;
      }

      this.error = "";
      return true;
    }

    renderError() {
      if (this.errorSpan) {
        this.errorSpan.textContent = this.error;
      }
    }

    markTouched() {
      this.touched = true;
    }

    isValid() {
      this.markTouched();
      const valid = this.validate();
      this.renderError();
      return valid;
    }
  }

  class FormValidator {
    constructor(form, submitFuntion = () => {}, fieldConfigs) {
      this.form = form;
      this.fields = [];
      this.submitFuntion = submitFuntion;

      for (let config of fieldConfigs) {
        const input = form.querySelector(`[name="${config.name}"]`);
        if (input) {
          this.fields.push(new FieldValidator(input, config.validationFuntion));
        }
      }

      this.form.addEventListener("submit", (e) => this.handleSubmit(e));
    }

    handleSubmit(e) {
      e.preventDefault();

      let allValid = true;
      for (let field of this.fields) {
        const valid = field.isValid();
        if (!valid) allValid = false;
      }

      if (allValid) {
        this.submitFuntion(this.form);
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("witness");

    const submitToStorage = (form) => {
      console.log("ejecutandose");
      // this.form.submit();
      const data = new FormData(form);
      const objectData = Object.fromEntries(data.entries());
      const stringData = JSON.stringify(objectData);
      localStorage.setItem("witness", stringData);
    };

    const formValidator = new FormValidator(form, submitToStorage, [
      {
        name: "first-name",
        validationFuntion: (name) => {
          const regExp = new RegExp(/^[a-zA-Z\s]+$/);
          const totalLength = name.length;

          if (totalLength == 0) {
            return "No puede quedar vacio el nombre";
          }

          if (totalLength > 15) {
            return "No puede contener mas de 15 caracteres";
          }

          if (totalLength < 3) {
            return "Debe tener al menos 3 caracteres";
          }

          if (!regExp.test(name)) {
            return "El campo debe contener solo letras";
          }
          return false;
        },
      },
      {
        name: "last-name",
        validationFuntion: (lastName) => {
          const regExp = new RegExp(/^[a-zA-Z\s]+$/);
          const totalLength = lastName.length;

          if (totalLength == 0) {
            return "No puede quedar vacio el apellido";
          }

          if (totalLength > 20) {
            return "El apellido no puede contener mas de 20 caracteres";
          }

          if (totalLength < 3) {
            return "El apellido debe tener al menos 3 caracteres";
          }

          if (!regExp.test(lastName)) {
            return "El campo debe contener solo letras";
          }
          return false;
        },
      },
      {
        name: "dni",
        validationFuntion: (dni) => {
          if (dni.length < 8 || dni.length > 10) {
            return "DNI debe tener entre 8 y 10 digitos";
          }
          return false;
        },
      },
      {
        name: "contact-number",
        validationFuntion: (number: Number) =>  {
          const numberString = number.toString();
          console.log(number, numberString);
          if (numberString.length == 0) {
            return "El numero de contacto es requerido";
          }
          console.log(numberString);
          // ¿Comienza con +54?
          if (!numberString.startsWith("+54")) {
            return "Debe comenzar con +54";
          }

          // Extraer lo que sigue después del +54
          const rest = numberString.slice(3);

          //¿Contiene solo números? (ignorando el posible '15')
          if (!/^\d+$/.test(rest)) {
            return "Debe contener solo números luego de +54";
          }

          // Paso 5: Validar longitud total
          if (numberString.length < 13 || numberString.length > 15) {
            return "Debe tener entre 13 y 15 dígitos";
          }
          return false;
        }
      },
      {
        name: "email",
        validationFuntion: (email) => {
          const regExp =
            /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/;
          if (!regExp.test(email)) {
            return "Correo electronico invalido";
          }
          return false;
        },
      },
      {
        name: "birthday",
        validationFuntion: (birthday) => {
          const today = new Date();
          const eighteenYearsAgo = new Date(
            today.getFullYear() - 18,
            today.getMonth(),
            today.getDate()
          );
          const birthdayDate = new Date(birthday);
          
          
          if (birthdayDate > eighteenYearsAgo) {
            return "Solo se pueden registrar personas mayores de 18 años";
          }
          return false;
        },
      },
    ]);
  });
</script>

<style>
  :root {
    --button-color: oklch(0.7234 0.1878 49.51);
    --form-color: oklab(1 0 0);
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }
 
  .hidden {
    display: none;
  }

  .check-in-form {
    background-color: var(--form-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    /* width: 50rem; */
  }

  fieldset {
    border: none;
    padding: 0;
    margin: 0;
  }

  legend {
    font-size: 1.25rem;
    font-weight: bold;
    margin-bottom: 2rem;
    text-align: center;
    align-items: center;
  }

  input {
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.25rem;
    border: 1px solid #ccc;
    border-radius: 0.5rem;
    box-sizing: border-box;
  }
  .button__confirm {
    padding: 0.82rem 1.77rem;
    border-radius: 10%;
    color: white;
    background-color: var(--button-color);
  }
  .button:hover {
    background-color: #ffbf00;
  }
  .error {
    display: block;
    height: 1rem;
    color: red;
    font-size: 0.9em;
  }
 label[for="birthday"] {
  color: gray;
 }

 @media  and (max-width: 1200px) { 
    .check-in-form{
      width: 50rem;
    }
  }

 @media  and (max-width: 992px){
  .check-in-form{
      font-size: 1.25rem;
    }
    legend{
      font-size: 1.75rem;
    }
    input{
      border-width: 2px;
    }
 }

 @media screen and (max-width: 768px) {
  .check-in-form {
    max-width: 30rem;
    width: 100%;
  }
}
  
 
</style>
